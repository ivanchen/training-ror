1.9.3p194 :001 > def somethingOne
1.9.3p194 :002?>   a=[1,3,5,7,9,11]
1.9.3p194 :003?>   b=[2,4,6,8,10]
1.9.3p194 :004?>   c=[]
1.9.3p194 :005?>   i=0
1.9.3p194 :006?>   until i == a.size
1.9.3p194 :007?>     c << a[i]
1.9.3p194 :008?>     c << b[i]
1.9.3p194 :009?>     i+=1
1.9.3p194 :010?>     end
1.9.3p194 :011?>   return c
1.9.3p194 :012?>   end
 => nil 
1.9.3p194 :013 > somethingOne
 => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, nil] 

1.9.3p194 :014 > def method_two
1.9.3p194 :015?>   a=[1,3,5,7,9]
1.9.3p194 :016?>   b=[2,4,6,8,10]
1.9.3p194 :017?>   c=[]
1.9.3p194 :018?>   i=0
1.9.3p194 :019?>   while i<= a.size
1.9.3p194 :020?>     c << b[b.size-i]
1.9.3p194 :021?>     c << b[b.size-i]
1.9.3p194 :022?>     i+=1
1.9.3p194 :023?>     end
1.9.3p194 :024?>   return c
1.9.3p194 :025?>   end
 => nil 
1.9.3p194 :027 > method_two
 => [nil, nil, 10, 10, 8, 8, 6, 6, 4, 4, 2, 2] 

1.9.3p194 :239 > def method_three
1.9.3p194 :240?>    a=[1,2,3,4,5,6,7,8,9]
1.9.3p194 :241?>    i=0
1.9.3p194 :242?>    while i< a.size
1.9.3p194 :243?>      if(a[i] % 2==0)
1.9.3p194 :244?>        puts a[i] 
1.9.3p194 :245?>        puts "genap"
1.9.3p194 :246?>        else
1.9.3p194 :247 >          puts a[i] 
1.9.3p194 :248?>        puts "ganjil"
1.9.3p194 :249?>        end
1.9.3p194 :250?>      i+=1
1.9.3p194 :251?>      end
1.9.3p194 :252?>    end
1.9.3p194 :253 > method_three
1
ganjil
2
genap
3
ganjil
4
genap
5
ganjil
6
genap
7
ganjil
8
genap
9
ganjil
 => nil 
1.9.3p194 :254 > def simpleMath
1.9.3p194 :255?>   a=[1,2,3,4,5,6,7,8,9,10]
1.9.3p194 :256?>   b=[10,9,8,7,6,5,4,3,2,1]
1.9.3p194 :257?>   c=[]
1.9.3p194 :258?>   i,j =0,0
1.9.3p194 :259?>   while i<a.size
1.9.3p194 :260?>     while j<=i
1.9.3p194 :261?>       c[i]=a[i]+b[j]
1.9.3p194 :262?>       j+=1
1.9.3p194 :263?>       end
1.9.3p194 :264?>     i+=1
1.9.3p194 :265?>     end
1.9.3p194 :266?>   return c
1.9.3p194 :267?>   end
 => nil 
1.9.3p194 :268 > simpleMath
 => [11, 11, 11, 11, 11, 11, 11, 11, 11, 11] 

1.9.3p194 :356 > def simpleMath_2
1.9.3p194 :357?>   a=[1,2,3,4,5,6,7,8,9,10]
1.9.3p194 :358?>   b=[10,9,8,7,6,5,4,3,2,1]
1.9.3p194 :359?>   c=[0,1,0,1,0,1,0,1,0,1]
1.9.3p194 :360?>   d=[0,0,0,0,0,0,0,0,0,0]
1.9.3p194 :361?>   i,j,k =0,0,0
1.9.3p194 :362?>   while i<a.size
1.9.3p194 :363?>     while j<=i
1.9.3p194 :364?>       while k<=j
1.9.3p194 :365?>         d[i]<<a[k]*b[k]*c[k]
1.9.3p194 :366?>         k+=1
1.9.3p194 :367?>         end
1.9.3p194 :368?>       j+=1
1.9.3p194 :369?>       end
1.9.3p194 :370?>     i+=1
1.9.3p194 :371?>     end
1.9.3p194 :372?>   return d
1.9.3p194 :373?>   end
 => nil 
1.9.3p194 :374 > simpleMath_2
 => [0, 0, 0, 0, 0, 0, 0, 0, 0, 0] 

1.9.3p194 :375 > def simpleMath_3
1.9.3p194 :376?>   a=[1,2,3,4,5,6,7,8,9,10]
1.9.3p194 :377?>   b=[10,9,8,7,6,5,4,3,2,1]
1.9.3p194 :378?>   c=[0,1,0,1,0,1,0,1,0,1]
1.9.3p194 :379?>   d=[0,0,0,0,0,0,0,0,0,0]
1.9.3p194 :380?>   i,j,k =0,0,0
1.9.3p194 :381?>   while i<a.size
1.9.3p194 :382?>     while j<=i
1.9.3p194 :383?>       while k<=j
1.9.3p194 :384?>         d[i]+=a[i]*b[j]*c[k]
1.9.3p194 :385?>         k+=1
1.9.3p194 :386?>         end
1.9.3p194 :387?>       j+=1
1.9.3p194 :388?>       end
1.9.3p194 :389?>     i+=1
1.9.3p194 :390?>     end
1.9.3p194 :391?>   return d
1.9.3p194 :392?>   end
 => nil 
1.9.3p194 :393 > simpleMath_3
 => [0, 18, 0, 28, 0, 30, 0, 24, 0, 10] 
1.9.3p194 :394 >
